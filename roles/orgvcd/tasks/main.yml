# ===========================================================
# CREACIÓN DE ORG VDC - CloudAPI + PowerCLI
# ===========================================================

# ===========================================================
# EXTRAER PREFIJO DEL ORG VDC
# ===========================================================
- name: Extraer prefijo del Org VDC
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# VALIDAR ORGANIZACIÓN EXISTENTE
# ===========================================================
- name: Obtener ID de la organización
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgs?filter=name=={{ vcd.orgFullName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: org_check
  delegate_to: localhost
  connection: local

- name: Extraer ID de la organización
  ansible.builtin.set_fact:
    org_id: "{{ org_check.json['values'][0]['id'] if (org_check.json['values'] | length > 0) else '' }}"
  delegate_to: localhost
  connection: local

- name: Validar existencia de la organización
  ansible.builtin.fail:
    msg: "❌ La organización '{{ vcd.orgFullName }}' no existe. Debe ser creada previamente."
  when: org_id == ''
  delegate_to: localhost
  connection: local

# ===========================================================
# RESOLVER COMPONENTES NECESARIOS
# ===========================================================
- name: Obtener todos los Provider VDCs
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/providerVdcs"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: provider_check
  delegate_to: localhost
  connection: local

- name: Buscar Provider VDC por prefijo regional
  ansible.builtin.set_fact:
    provider_match: >-
      {%
        set p = (
          provider_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': p[0].name, 'id': p[0].id} if p | length == 1 else {} }}
  when: provider_check.json['values'] is defined and (provider_check.json['values'] | length > 0)
  delegate_to: localhost
  connection: local

- name: Validar Provider VDC encontrado
  ansible.builtin.fail:
    msg: "❌ No se encontró ningún Provider VDC que comience con '{{ locationPrefix }}'."
  when: provider_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# NETWORK POOL asociado al NSX Manager del Provider
# ===========================================================
- name: Obtener todos los Network Pools
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/networkPools/networkPoolSummaries"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: network_check
  delegate_to: localhost
  connection: local

- name: Buscar Network Pool por prefijo regional
  ansible.builtin.set_fact:
    network_match: >-
      {%
        set n = (
          network_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': n[0].name, 'id': n[0].id} if n | length == 1 else {} }}
  when: network_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Network Pool encontrado
  ansible.builtin.fail:
    msg: >-
      ❌ No se encontró ningún Network Pool con prefijo '{{ locationPrefix }}'.
  when: network_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# STORAGE PROFILE asociado al Provider VDC
# ===========================================================
- name: Obtener todos los Storage Profiles (Policies)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/pvdcStoragePolicies"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: storage_check
  delegate_to: localhost
  connection: local

- name: Buscar Storage Policy por Provider VDC
  ansible.builtin.set_fact:
    storage_match: >-
      {%
        set s = (
          storage_check.json['values']
          | selectattr('providerVdcRef.name', 'equalto', provider_match.name)
          | selectattr('isEnabled', 'equalto', true)
          | selectattr('totalCapacityMb', '>', 0)
          | list
        )
      %}{{ {'name': s[0].name, 'id': s[0].id} if s | length > 0 else {} }}
  when: storage_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Storage Profile encontrado
  ansible.builtin.fail:
    msg: "❌ No se encontró Storage Policy asociada al Provider '{{ provider_match.name }}'."
  when: storage_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# BÚSQUEDA Y CÁLCULO DE COMPUTE POLICY (CORRECCIÓN DE TIPO)
# ===========================================================
- name: Obtener Compute Policy por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/2.0.0/vdcComputePolicies?filter=name=={{ locationPrefix }}*"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: compute_policy_check
  delegate_to: localhost
  connection: local

- name: Buscar Placement Policy asociada al PVDC y seleccionarla
  ansible.builtin.set_fact:
    # CORRECCIÓN: Usamos compute_policy_check.json['values'] en lugar de .values
    # para forzar la interpretación como una clave de diccionario y evitar el error 'builtin_function_or_method'.
    compute_match: "{{ compute_policy_check.json['values'] | selectattr('isSizingOnly', 'equalto', false) | selectattr('pvdcId', 'equalto', provider_match.id) | list | first | default({}) }}"
  when: compute_policy_check.json['values'] is defined and (compute_policy_check.json['values'] | length > 0)
  delegate_to: localhost
  connection: local

- name: Validar Placement Policy encontrada
  ansible.builtin.fail:
    msg: "❌ No se encontró ninguna Placement Policy ('isSizingOnly': false) asociada al Provider VDC '{{ provider_match.name }}' ({{ provider_match.id }})."
  when: compute_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# MOSTRAR RESULTADOS DE COMPONENTES DETECTADOS (ROBUSTO)
# ===========================================================
- name: Mostrar componentes detectados
  ansible.builtin.debug:
    msg:
      # Uso de | default para evitar fallas si una variable *_match es {}
      - "✅ Provider VDC: {{ provider_match.name | default('No definido') }} ({{ provider_match.id | default('No definido') }})"
      - "✅ Network Pool: {{ network_match.name | default('No definido') }} ({{ network_match.id | default('No definido') }})"
      - "✅ Storage Profile: {{ storage_match.name | default('No definido') }} ({{ storage_match.id | default('No definido') }})"
      - "✅ Compute Policy: {{ compute_match.name | default('No definido') }} ({{ compute_match.id | default('No definido') }})"
  delegate_to: localhost
  connection: local

# ===========================================================
# VALIDAR EXISTENCIA DEL ORG VDC
# ===========================================================
- name: Verificar si el Org VDC ya existe por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: vdc_check
  delegate_to: localhost
  connection: local

- name: Determinar si el Org VDC ya existe
  ansible.builtin.set_fact:
    vdc_exists: "{{ vdc_check.json['values'] | length > 0 }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# CALCULAR MODELO DE ASIGNACIÓN SEGÚN "TRIAL"
# ===========================================================
- name: Determinar modelo de asignación
  ansible.builtin.set_fact:
    allocation_model: >-
      {% if vcd.trial | bool %}
      PayAsYouGo
      {% else %}
      AllocationPool
      {% endif %}
  delegate_to: localhost
  connection: local

- name: Mostrar modelo de asignación seleccionado
  ansible.builtin.debug:
    msg: "⚙️ Modo de asignación seleccionado: {{ allocation_model }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# MOSTRAR VARIABLES DE ENTRADA ANTES DE PowerCLI (ROBUSTO)
# ===========================================================
- name: Mostrar variables antes de ejecutar PowerCLI
  ansible.builtin.debug:
    msg:
      - "📡 Servidor VCD: {{ vcd.host }}"
      - "👤 Usuario: {{ vcd.user }}"
      - "🏢 Organización: {{ vcd.orgFullName }}"
      - "🏗️  Org VDC: {{ vcd.orgVdcName }}"
      # Uso de | default para mostrar un mensaje claro si la variable falló la validación
      - "🌍 Provider VDC Name: {{ provider_match.name | default('No definido') }}"
      - "💾 Storage Policy Name: {{ storage_match.name | default('No definido') }}"
      - "🌐 Network Pool Name: {{ network_match.name | default('No definido') }}"
      - "🧠 CPU Allocation: {{ vcd.cpuQuota }}"
      - "💽 Memory Allocation: {{ vcd.memoryQuota }}"
      - "📦 Storage Allocation: {{ vcd.storageQuota }}"
      - "📝 Descripción: Organización {{ vcd.orgFullName }} - creado por AWX"
      - "AllocationModel {{allocation_model}}"
      - "Compute Policy Name (CpName): {{ compute_match.name | default('No definido') }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# 4️⃣ Ejecutar script PowerCLI remoto con log (AÑADIDO | default('') para robustez)
# ===========================================================
- name: Ejecutar PowerCLI en Windows
  ansible.builtin.win_shell: >
    powershell.exe -ExecutionPolicy Bypass -File "D:\Users\Jeferson Diaz\Documents\g6\Ansible\orgvcd.ps1" -AllocationModel "{{allocation_model}}" -Server "{{ vcd.host }}" -Username "{{ vcd.user }}" -Password "{{ vcd.password }}" -OrgName "{{ vcd.orgFullName }}" -VdcName "{{ vcd.orgVdcName }}" -ProvName "{{ provider_match.name | default('') }}" -CpName "{{ compute_match.name | default('') }}" -SpName "{{ storage_match.name | default('') }}" -NpName "{{ network_match.name | default('') }}" -CpuAllocation {{ vcd.cpuQuota }} -MemoryAllocation {{ vcd.memoryQuota }} -StorageAllocation {{ vcd.storageQuota }} -Description "Organización {{ vcd.orgFullName }} - creado por AWX"
  vars:
    hostvcd: "{{vcd.host}}"
    ansible_connection: winrm
    ansible_host: "100.66.2.151"
    ansible_port: 5985
    ansible_user: "jeferson diaz"
    ansible_password: "Zero.eg9olj12*"
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
  register: script_result

# ===========================================================
# MOSTRAR RESULTADO DE EJECUCIÓN
# ===========================================================
- name: Mostrar resultado del script PowerCLI
  ansible.builtin.debug:
    msg:
      - "✅ Ejecución completada en PowerCLI"
      - "📜 Salida:"
      - "{{ script_result.stdout_lines }}"
