---
# Este archivo solo debe contener la lista de tareas (tasks)

- name: Extraer prefijo del Org VDC para búsqueda regional
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
  delegate_to: localhost
  connection: local

- name: Obtener ID de la organización (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgs?filter=name=={{ vcd.orgFullName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: org_check
  delegate_to: localhost
  connection: local

- name: Extraer ID de la organización
  ansible.builtin.set_fact:
    org_id: "{{ org_check.json['values'][0]['id'] if (org_check.json['values'] | length > 0) else '' }}"
  delegate_to: localhost
  connection: local

- name: Validar existencia de la organización
  ansible.builtin.fail:
    msg: "❌ La organización '{{ vcd.orgFullName }}' no existe. Debe ser creada previamente."
  when: org_id == ''
  delegate_to: localhost
  connection: local

# ===========================================================
# 2. RESOLVER COMPONENTES NECESARIOS (Provider VDC, Network, Storage, Compute)
# ===========================================================

- name: Obtener todos los Provider VDCs (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/providerVdcs"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: provider_check
  delegate_to: localhost
  connection: local

- name: Buscar Provider VDC por prefijo regional
  ansible.builtin.set_fact:
    provider_match: >-
      {%
        set p = (
          provider_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': p[0].name, 'id': p[0].id} if p | length == 1 else {} }}
  when: provider_check.json['values'] is defined and (provider_check.json['values'] | length > 0)
  delegate_to: localhost
  connection: local

- name: Validar Provider VDC encontrado
  ansible.builtin.fail:
    msg: "❌ No se encontró ningún Provider VDC que comience con '{{ locationPrefix }}'."
  when: provider_match == {}
  delegate_to: localhost
  connection: local

- name: Obtener todos los Network Pools (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/networkPools/networkPoolSummaries"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: network_check
  delegate_to: localhost
  connection: local

- name: Buscar Network Pool por prefijo regional
  ansible.builtin.set_fact:
    network_match: >-
      {%
        set n = (
          network_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': n[0].name, 'id': n[0].id} if n | length == 1 else {} }}
  when: network_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Network Pool encontrado
  ansible.builtin.fail:
    msg: >-
      ❌ No se encontró ningún Network Pool con prefijo '{{ locationPrefix }}'.
  when: network_match == {}
  delegate_to: localhost
  connection: local

- name: Obtener todos los Storage Profiles (Policies) (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/pvdcStoragePolicies"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: storage_check
  delegate_to: localhost
  connection: local

- name: Buscar Storage Policy por Provider VDC
  ansible.builtin.set_fact:
    storage_match: >-
      {%
        set s = (
          storage_check.json['values']
          | selectattr('providerVdcRef.name', 'equalto', provider_match.name)
          | selectattr('isEnabled', 'equalto', true)
          | selectattr('totalCapacityMb', '>', 0)
          | list
        )
      %}{{ {'name': s[0].name, 'id': s[0].id} if s | length > 0 else {} }}
  when: storage_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Storage Profile encontrado
  ansible.builtin.fail:
    msg: "❌ No se encontró Storage Policy asociada al Provider '{{ provider_match.name }}'."
  when: storage_match == {}
  delegate_to: localhost
  connection: local

- name: Obtener Compute Policy por nombre (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/2.0.0/vdcComputePolicies?filter=name=={{ locationPrefix }}*"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: compute_policy_check
  delegate_to: localhost
  connection: local

- name: Buscar Placement Policy asociada al PVDC y seleccionarla
  ansible.builtin.set_fact:
    compute_match: "{{ compute_policy_check.json['values'] | selectattr('isSizingOnly', 'equalto', false) | selectattr('pvdcId', 'equalto', provider_match.id) | list | first | default({}) }}"
  when: compute_policy_check.json['values'] is defined and (compute_policy_check.json['values'] | length > 0)
  delegate_to: localhost
  connection: local

- name: Validar Placement Policy encontrada
  ansible.builtin.fail:
    msg: "❌ No se encontró ninguna Placement Policy ('isSizingOnly': false) asociada al Provider VDC '{{ provider_match.name }}' ({{ provider_match.id }})."
  when: compute_match == {}
  delegate_to: localhost
  connection: local

- name: Mostrar componentes detectados
  ansible.builtin.debug:
    msg:
      - "✅ Provider VDC: {{ provider_match.name | default('No definido') }} ({{ provider_match.id | default('No definido') }})"
      - "✅ Network Pool: {{ network_match.name | default('No definido') }} ({{ network_match.id | default('No definido') }})"
      - "✅ Storage Profile: {{ storage_match.name | default('No definido') }} ({{ storage_match.id | default('No definido') }})"
      - "✅ Compute Policy: {{ compute_match.name | default('No definido') }} ({{ compute_match.id | default('No definido') }})"
  delegate_to: localhost
  connection: local

# ===========================================================
# 3. LÓGICA DE CREACIÓN Y PRE-EJECUCIÓN
# ===========================================================
- name: Verificar si el Org VDC ya existe por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: vdc_check
  delegate_to: localhost
  connection: local

- name: Determinar si el Org VDC ya existe
  ansible.builtin.set_fact:
    vdc_exists: "{{ vdc_check.json['values'] | length > 0 }}"
  delegate_to: localhost
  connection: local

- name: Determinar modelo de asignación (basado en vcd.trial)
  ansible.builtin.set_fact:
    allocation_model: >-
      {% if vcd.trial | bool %}
      PayAsYouGo
      {% else %}
      AllocationPool
      {% endif %}
  delegate_to: localhost
  connection: local

- name: Mostrar modelo de asignación seleccionado
  ansible.builtin.debug:
    msg: "⚙️ Modo de asignación seleccionado: {{ allocation_model }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# 4. EJECUCIÓN PRINCIPAL (PowerCLI)
# ===========================================================
- name: Ejecutar PowerCLI en Windows (Crea el Org VDC y aplica Metadatos)
  ansible.builtin.win_shell: >
    powershell.exe -ExecutionPolicy Bypass -File "D:\Users\Jeferson Diaz\Documents\g6\Ansible\orgvcd.ps1"
    -AllocationModel "{{allocation_model}}"
    -Server "{{ vcd.host }}"
    -Username "{{ vcd.user }}"
    -Password "{{ vcd.password }}"
    -OrgName "{{ vcd.orgFullName }}"
    -VdcName "{{ vcd.orgVdcName }}"
    -ProvName "{{ provider_match.name | default('') }}"
    -CpName "{{ compute_match.name | default('') }}"
    -SpName "{{ storage_match.name | default('') }}"
    -NpName "{{ network_match.name | default('') }}"
    -CpuAllocation {{ vcd.cpuQuota }}
    -MemoryAllocation {{ vcd.memoryQuota }}
    -StorageAllocation {{ vcd.storageQuota }}
    -Description "Organización {{ vcd.orgFullName }} - creado por AWX"
    -IsTrialMode "{{ vcd.trial | bool }}" # <--- NUEVO PARÁMETRO MANDATORIO
  vars:
    # Estas vars de conexión son necesarias aquí si el rol no las define globalmente.
    ansible_connection: winrm
    ansible_host: "100.66.2.151"
    ansible_port: 5985
    ansible_user: "jeferson diaz"
    ansible_password: "Zero.eg9olj12*"
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
  register: script_result

# ===========================================================
# 5. EXTRACCIÓN DEL ID DEL VDC (Metadatos aplicados en PowerCLI)
# ===========================================================
- name: Extraer ID del Org VDC recién creado o existente
  ansible.builtin.set_fact:
    # CORRECCIÓN: Usamos 'match' y 'split' para robustez y evitamos el uso complejo de regex en Ansible.
    created_vdc_id: >-
      {{ script_result.stdout_lines | select('match', '^VDC_ID_CREATED:') | first | split(':') | last | default('') }}
  delegate_to: localhost
  connection: local

- name: Validar que se encontró el VDC ID
  ansible.builtin.fail:
    msg: "❌ ERROR: No se pudo obtener el ID del VDC (VDC_ID_CREATED) de la salida de PowerCLI. Asegúrese de que el script PowerCLI devuelve el ID correctamente."
  when: created_vdc_id == ''
  delegate_to: localhost
  connection: local

- name: Mostrar mensaje de confirmación de Metadatos
  ansible.builtin.debug:
    msg: "✅ Metadato 'isTrialMode' ({{ vcd.trial | bool }}) aplicado exitosamente por el script PowerCLI."
  delegate_to: localhost
  connection: local

# ===========================================================
# 6. MOSTRAR RESULTADO FINAL
# ===========================================================
- name: Mostrar resultado del script PowerCLI
  ansible.builtin.debug:
    msg:
      - "✅ Ejecución completada en PowerCLI"
      - "📜 Salida:"
      - "{{ script_result.stdout_lines }}"
  delegate_to: localhost
  connection: local
