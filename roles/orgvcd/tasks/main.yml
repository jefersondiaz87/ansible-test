# ===========================================================
# CREACI√ìN DE ORG VDC - CloudAPI + PowerCLI
# ===========================================================

# ===========================================================
# EXTRAER PREFIJO DEL ORG VDC
# ===========================================================
- name: Extraer prefijo del Org VDC
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# VALIDAR ORGANIZACI√ìN EXISTENTE
# ===========================================================
- name: Obtener ID de la organizaci√≥n
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/orgs?filter=name=={{ vcd.orgFullName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: org_check
  delegate_to: localhost
  connection: local

- name: Extraer ID de la organizaci√≥n
  ansible.builtin.set_fact:
    org_id: "{{ org_check.json['values'][0]['id'] if (org_check.json['values'] | length > 0) else '' }}"
  delegate_to: localhost
  connection: local

- name: Validar existencia de la organizaci√≥n
  ansible.builtin.fail:
    msg: "‚ùå La organizaci√≥n '{{ vcd.orgFullName }}' no existe. Debe ser creada previamente."
  when: org_id == ''
  delegate_to: localhost
  connection: local

# ===========================================================
# RESOLVER COMPONENTES NECESARIOS
# ===========================================================
- name: Obtener todos los Provider VDCs
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/providerVdcs"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: provider_check
  delegate_to: localhost
  connection: local

- name: Buscar Provider VDC por prefijo regional
  ansible.builtin.set_fact:
    provider_match: >-
      {%
        set p = (
          provider_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': p[0].name, 'id': p[0].id} if p | length > 0 else {} }}
  when: provider_check.json['values'] is defined and (provider_check.json['values'] | length > 0)
  delegate_to: localhost
  connection: local

- name: Validar Provider VDC encontrado
  ansible.builtin.fail:
    msg: "‚ùå No se encontr√≥ ning√∫n Provider VDC que comience con '{{ locationPrefix }}'."
  when: provider_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# NETWORK POOL asociado al NSX Manager del Provider
# ===========================================================
- name: Obtener todos los Network Pools
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/networkPools/networkPoolSummaries"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: network_check
  delegate_to: localhost
  connection: local

- name: Buscar Network Pool por prefijo regional
  ansible.builtin.set_fact:
    network_match: >-
      {%
        set n = (
          network_check.json['values']
          | selectattr('name', 'search', '^' ~ locationPrefix)
          | list
        )
      %}{{ {'name': n[0].name, 'id': n[0].id} if n | length > 0 else {} }}
  when: network_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Network Pool encontrado
  ansible.builtin.fail:
    msg: >-
      ‚ùå No se encontr√≥ ning√∫n Network Pool con prefijo '{{ locationPrefix }}'.
  when: network_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# STORAGE PROFILE asociado al Provider VDC
# ===========================================================
- name: Obtener todos los Storage Profiles (Policies)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/pvdcStoragePolicies"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: storage_check
  delegate_to: localhost
  connection: local

- name: Buscar Storage Policy por Provider VDC
  ansible.builtin.set_fact:
    storage_match: >-
      {%
        set s = (
          storage_check.json['values']
          | selectattr('providerVdcRef.name', 'equalto', provider_match.name)
          | selectattr('isEnabled', 'equalto', true)
          | selectattr('totalCapacityMb', '>', 0)
          | list
        )
      %}{{ {'name': s[0].name, 'id': s[0].id} if s | length > 0 else {} }}
  when: storage_check.json['values'] | length > 0
  delegate_to: localhost
  connection: local

- name: Validar Storage Profile encontrado
  ansible.builtin.fail:
    msg: "‚ùå No se encontr√≥ Storage Policy asociada al Provider '{{ provider_match.name }}'."
  when: storage_match == {}
  delegate_to: localhost
  connection: local

# ===========================================================
# MOSTRAR RESULTADOS DE COMPONENTES DETECTADOS
# ===========================================================
- name: Mostrar componentes detectados
  ansible.builtin.debug:
    msg:
      - "‚úÖ Provider VDC: {{ provider_match.name }} ({{ provider_match.id }})"
      - "‚úÖ Network Pool: {{ network_match.name }} ({{ network_match.id }})"
      - "‚úÖ Storage Profile: {{ storage_match.name }} ({{ storage_match.id }})"
  delegate_to: localhost
  connection: local

# ===========================================================
# VALIDAR EXISTENCIA DEL ORG VDC
# ===========================================================
- name: Verificar si el Org VDC ya existe por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    return_content: yes
    validate_certs: false
  register: vdc_check
  delegate_to: localhost
  connection: local

- name: Determinar si el Org VDC ya existe
  ansible.builtin.set_fact:
    vdc_exists: "{{ vdc_check.json['values'] | length > 0 }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# CALCULAR MODELO DE ASIGNACI√ìN SEG√öN "TRIAL"
# ===========================================================
- name: Determinar modelo de asignaci√≥n
  ansible.builtin.set_fact:
    allocation_model: >-
      {% if vcd.trial | bool %}
      PayAsYouGo
      {% else %}
      AllocationPool
      {% endif %}
  delegate_to: localhost
  connection: local

- name: Mostrar modelo de asignaci√≥n seleccionado
  ansible.builtin.debug:
    msg: "‚öôÔ∏è Modo de asignaci√≥n seleccionado: {{ allocation_model }}"
  delegate_to: localhost
  connection: local

# ===========================================================
# MOSTRAR VARIABLES DE ENTRADA ANTES DE PowerCLI
# ===========================================================
- name: Mostrar variables antes de ejecutar PowerCLI
  ansible.builtin.debug:
    msg:
      - "üì° Servidor VCD: {{ vcd.host }}"
      - "üë§ Usuario: {{ vcd.user }}"
      - "üè¢ Organizaci√≥n: {{ vcd.orgFullName }}"
      - "üèóÔ∏è  Org VDC: {{ vcd.orgVdcName }}"
      - "üåç Provider VDC: {{ provider_match.id | default('No definido') }}"
      - "üíæ Storage Policy: {{ storage_match.id | default('No definido') }}"
      - "üåê Network Pool: {{ network_match.id | default('No definido') }}"
      - "üß† CPU Allocation: {{ vcd.cpuQuota }}"
      - "üíΩ Memory Allocation: {{ vcd.memoryQuota }}"
      - "üì¶ Storage Allocation: {{ vcd.storageQuota }}"
      - "üìù Descripci√≥n: Organizaci√≥n {{ vcd.orgFullName }} - creado por AWX"
  delegate_to: localhost
  connection: local

# ===========================================================
# 4Ô∏è‚É£ Ejecutar script PowerCLI remoto con log
# ===========================================================
- name: Ejecutar PowerCLI en Windows
  ansible.builtin.win_shell: |
    Write-Host "=== Iniciando ejecucion PowerCLI ==="
    Write-Host "Servidor: {{ vcd.host }}"
    Write-Host "Usuario: {{ vcd.user }}"
    Write-Host "OrgName: {{ vcd.orgFullName }}"
    Write-Host "Script: D:\Users\Jeferson Diaz\Documents\g6\Ansible\orgvcd.ps1"

    powershell.exe -ExecutionPolicy Bypass -File "D:\Users\Jeferson Diaz\Documents\g6\Ansible\orgvcd.ps1" `
      -Server "{{ vcd.host }}" `
      -Username "{{ vcd.user }}" `
      -Password "{{ vcd.password }}" `
      -OrgName "{{ vcd.orgFullName }}" `
      -VdcName "{{ vcd.orgVdcName }}" `
      -ProvName "{{ provider_match.id }}" `
      -SpName "{{ storage_match.id }}" `
      -NpName "{{ network_match.id }}" `
      -CpuAllocation {{ vcd.cpuQuota }} `
      -MemoryAllocation {{ vcd.memoryQuota }} `
      -StorageAllocation {{ vcd.storageQuota }} `
      -Description "Organizaci√≥n {{ vcd.orgFullName }} - creado por AWX"
  vars:
    ansible_connection: winrm
    ansible_host: "100.66.2.151"
    ansible_port: 5985
    ansible_user: "jeferson diaz"
    ansible_password: "Zero.eg9olj12*"
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
  register: script_result

# ===========================================================
# MOSTRAR RESULTADO DE EJECUCI√ìN
# ===========================================================
- name: Mostrar resultado del script PowerCLI
  ansible.builtin.debug:
    msg:
      - "‚úÖ Ejecuci√≥n completada en PowerCLI"
      - "üìú Salida:"
      - "{{ script_result.stdout_lines }}"
