# ===========================================================
# CREACIÓN DE EDGE GATEWAY (CloudAPI 1.0.0)
# ===========================================================

# -----------------------------------------------------------
# Construir el nombre del Edge Gateway igual que en vRO
# -----------------------------------------------------------
- name: Construir nombre del Edge Gateway
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
    edgeGatewayName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.orgFullName }}-{{ vcd.networkType }}"
    externalNetworkName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.networkType }}-01"
  delegate_to: localhost

- name: Mostrar nombre calculado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "📍 locationPrefix: {{ locationPrefix }}"
      - "📡 Edge Gateway generado: {{ edgeGatewayName }}"
      - "🌐 External Network esperada: {{ externalNetworkName }}"

# ===========================================================
# VALIDAR SI EL EDGE GATEWAY YA EXISTE
# ===========================================================
- name: Validar si el Edge Gateway ya existe (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: edge_check
  failed_when: edge_check.status not in [200]

- name: Determinar si el Edge Gateway ya existe
  ansible.builtin.set_fact:
    edge_exists: "{{ ('values' in edge_check.json) and (edge_check.json['values'] | length > 0) }}"

- name: Mostrar estado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "💡 Edge Gateway buscado: {{ edgeGatewayName }}"
      - "📋 Resultado: {{ (edge_check.json['values'] | length) if ('values' in edge_check.json) else 0 }}"
      - "🔍 Estado: {{ 'YA EXISTE ✅' if edge_exists else 'NO EXISTE 🚀 Se procederá a crear' }}"

# ===========================================================
# MOSTRAR VARIABLES DE ENTRADA ANTES DE PowerCLI
# ===========================================================
- name: Mostrar variables antes de ejecutar PowerCLI
  ansible.builtin.debug:
    msg:
      - "📡 Servidor VCD: {{ vcd.host }}"
      - "👤 Usuario: {{ vcd.user }}"
      - "🏗️  Org VDC: {{ vcd.orgVdcName }}"
      - "🏗️  EdgeName: {{ edgeGatewayName }}"
      - "🏗️  externalNetworkName: {{ externalNetworkName }}"
      - "📝 Descripción: Organización {{ vcd.orgFullName }} - creado por AWX"
  delegate_to: localhost
  connection: local

# ===========================================================
# 🚀 CREAR EDGE GATEWAY VIA POWERSHELL (PowerCLI 13.3)
# ===========================================================
- name: Ejecutar script PowerCLI para crear Edge Gateway
  ansible.builtin.win_shell: |
    Write-Host "=== Iniciando creación de Edge Gateway (PowerCLI 13.3) ==="
    Write-Host "Servidor: {{ vcd.host }}"
    Write-Host "Usuario: {{ vcd.user }}"
    Write-Host "OrgVdc: {{ vcd.orgVdcName }}"
    Write-Host "EdgeName: {{ edgeGatewayName }}"
    Write-Host "AccessToken: {{vcd.access_token}}"
    powershell.exe -ExecutionPolicy Bypass -File "D:\Users\Jeferson Diaz\Documents\g6\Ansible\networkedge.ps1" `
      -Server "{{ vcd.host }}" `
      -Username "{{ vcd.user }}" `
      -Password "{{ vcd.password }}" `
      -OrgVdcName "{{ vcd.orgVdcName }}" `
      -EdgeName "{{ edgeGatewayName }}" `
      -ExternalNetworkName "{{ externalNetworkName }}" `
      -AccessToken: {{vcd.access_token}}

  vars:
    ansible_connection: winrm
    ansible_host: "100.66.2.151"
    ansible_port: 5985
    ansible_user: "jeferson diaz"
    ansible_password: "Zero.eg9olj12*"
    ansible_winrm_transport: basic
    ansible_winrm_server_cert_validation: ignore
  register: script_result
  delegate_to: win-builder

- name: Extraer EDGE_ID y UPLINK_INFO desde stdout
  ansible.builtin.set_fact:
    edge_id: "{{ script_result.stdout_lines | select('search', '^EDGE_ID=') | map('regex_replace', '^EDGE_ID=', '') | first }}"
    uplink_info_raw: "{{ script_result.stdout_lines | select('search', '^UPLINK_INFO=') | map('regex_replace', '^UPLINK_INFO=', '') | first }}"
  when: script_result.stdout_lines is defined

- name: Separar UPLINK_INFO en variables individuales
  ansible.builtin.set_fact:
    uplink_name: "{{ uplink_info_raw.split(';')[0] }}"
    gateway: "{{ uplink_info_raw.split(';')[1] }}"
    start_ip: "{{ uplink_info_raw.split(';')[2] }}"
    end_ip: "{{ uplink_info_raw.split(';')[3] }}"
  when: uplink_info_raw is defined  

# ===========================================================
# MOSTRAR RESULTADO DE EJECUCIÓN
# ===========================================================
- name: Mostrar resultado del script PowerCLI
  ansible.builtin.debug:
    msg:
      - "✅ Ejecución completada en PowerCLI"
      - "📜 Salida:"
      - "{{ script_result.stdout_lines }}"
