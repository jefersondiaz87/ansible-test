# ===========================================================
# CREACI√ìN DE EDGE GATEWAY (CloudAPI 1.0.0)
# ===========================================================

# -----------------------------------------------------------
# Construir el nombre del Edge Gateway igual que en vRO
# -----------------------------------------------------------
- name: Construir nombre del Edge Gateway
  ansible.builtin.set_fact:
    locationPrefix: "{{ vcd.orgVdcName.split('-')[0] }}"
    edgeGatewayName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.orgFullName }}-{{ vcd.networkType }}"
    externalNetworkName: "{{ vcd.orgVdcName.split('-')[0] }}-{{ vcd.networkType }}-01"
  delegate_to: localhost

- name: Mostrar nombre calculado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üìç locationPrefix: {{ locationPrefix }}"
      - "üì° Edge Gateway generado: {{ edgeGatewayName }}"
      - "üåê External Network esperada: {{ externalNetworkName }}"

# ===========================================================
# VALIDAR SI EL EDGE GATEWAY YA EXISTE
# ===========================================================
- name: Validar si el Edge Gateway ya existe (CloudAPI)
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: edge_check
  failed_when: edge_check.status not in [200]

- name: Determinar si el Edge Gateway ya existe
  ansible.builtin.set_fact:
    edge_exists: "{{ ('values' in edge_check.json) and (edge_check.json['values'] | length > 0) }}"

- name: Mostrar estado del Edge Gateway
  ansible.builtin.debug:
    msg:
      - "üí° Edge Gateway buscado: {{ edgeGatewayName }}"
      - "üìã Resultado: {{ (edge_check.json['values'] | length) if ('values' in edge_check.json) else 0 }}"
      - "üîç Estado: {{ 'YA EXISTE ‚úÖ' if edge_exists else 'NO EXISTE üöÄ Se proceder√° a crear' }}"

# ===========================================================
# OBTENER ID DE LA RED EXTERNA Y SUBNETS DISPONIBLES
# ===========================================================
- name: Buscar red externa por nombre
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/externalNetworks?filter=name=={{ externalNetworkName }}"
    method: GET
    headers:
      Authorization: "Bearer {{ vcd.access_token }}"
      Accept: "application/json;version={{ vcd.api_version }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: ext_net_lookup
  failed_when: ext_net_lookup.status not in [200]

- name: Validar red externa
  ansible.builtin.assert:
    that:
      - ext_net_lookup.json.resultTotal > 0
    fail_msg: "‚ùå No se encontr√≥ la red externa '{{ externalNetworkName }}'."

- name: Seleccionar la primera red externa con IPs libres
  ansible.builtin.set_fact:
    selected_ext_net: "{{ ext_net_lookup.json['values'][0] }}"
    extNetId: "{{ ext_net_lookup.json['values'][0]['id'] }}"
    uplink_subnets: "{{ ext_net_lookup.json['values'][0]['subnets']['values'] }}"

- name: Mostrar red externa seleccionada
  ansible.builtin.debug:
    msg:
      - "üåê Red seleccionada: {{ selected_ext_net.name }}"
      - "üí° Gateway: {{ uplink_subnets[0].gateway }}"
      - "üì¶ Total IPs: {{ uplink_subnets[0].totalIpCount }}"
      - "üî¢ Usadas: {{ uplink_subnets[0].usedIpCount }}"

# ===========================================================
# OBTENER ORG VDC ID
# ===========================================================
- name: Obtener ID del Org VDC
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs?filter=name=={{ vcd.orgVdcName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: false
  register: vdc_check
  failed_when: vdc_check.status not in [200]

- name: Guardar orgVdcId
  ansible.builtin.set_fact:
    org_vdc_id: "{{ vdc_check.json['values'][0]['id'] }}"
  when: vdc_check.json['values'] | length > 0

# ===========================================================
# VALIDAR ESTADO DEL ORG VDC (Debe estar ENABLED)
# ===========================================================
- name: Consultar estado del Org VDC
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/vdcs/{{ org_vdc_id }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: "{{ vcd.verify_ssl }}"
  register: orgvdc_status
  failed_when: orgvdc_status.status not in [200]

- name: Detectar estado del Org VDC
  ansible.builtin.set_fact:
    orgvdc_state: "{{ 'ENABLED' if 'id' in orgvdc_status.json else 'UNKNOWN' }}"

- name: Validar que el Org VDC est√° habilitado
  ansible.builtin.assert:
    that:
      - orgvdc_state == 'ENABLED'
    fail_msg: "‚ùå El Org VDC '{{ vcd.orgVdcName }}' no est√° habilitado."
    success_msg: "‚úÖ El Org VDC '{{ vcd.orgVdcName }}' est√° habilitado."

# ===========================================================
# CREAR EDGE GATEWAY SIN IPs (L√ìGICA VRO)
# ===========================================================
- name: Limpiar ipRanges antes de crear el Edge
  ansible.builtin.set_fact:
    clean_subnets: "{{ uplink_subnets | map('combine', {'ipRanges': {'values': []}}) | list }}"

- name: Construir payload del Edge Gateway (sin IPs)
  ansible.builtin.set_fact:
    edge_payload:
      name: "{{ edgeGatewayName }}"
      description: "Edge Gateway creado autom√°ticamente por Ansible REST"
      orgVdc:
        id: "{{ org_vdc_id }}"
      edgeGatewayUplinks:
        - uplinkId: "{{ extNetId }}"
          dedicated: "{{ 'false' if vcd.networkType == 'IO' else 'true' }}"
          subnets:
            values: "{{ clean_subnets }}"

- name: Crear Edge Gateway v√≠a CloudAPI (sin IPs)
  when: not edge_exists
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways"
    method: POST
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body: "{{ edge_payload }}"
    validate_certs: false
  register: edge_create
  failed_when: edge_create.status not in [200,201,202]

- name: Obtener URN del Edge Gateway creado
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways?filter=name=={{ edgeGatewayName }}"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: false
  register: edge_query

- name: Guardar URN del Edge
  ansible.builtin.set_fact:
    edge_urn: "{{ edge_query.json['values'][0]['id'] if (edge_query.json['values'] | length > 0) else '' }}"

## ===========================================================
# ASIGNAR IPs POST-CREACI√ìN (CloudAPI 1.0.0)
# ===========================================================

# -----------------------------------------------------------
# Obtener IPs disponibles desde la External Network
# -----------------------------------------------------------
- name: Obtener IPs disponibles del External Network
  when: edge_urn != ''
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/externalNetworks/{{ extNetId }}/availableIpAddresses"
    method: GET
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
    validate_certs: false
  register: available_ips
  failed_when: available_ips.status not in [200]

- name: Mostrar IPs disponibles detectadas
  when: edge_urn != ''
  ansible.builtin.debug:
    msg: "üì¨ IPs disponibles: {{ available_ips.json['values'] }}"

# -----------------------------------------------------------
# Seleccionar las IPs a usar
# -----------------------------------------------------------
- name: Definir cantidad de IPs a usar
  ansible.builtin.set_fact:
    ip_allocate_count: "{{ vcd.edgeIpAllocationCount | default(5) }}"

- name: Seleccionar primeras IPs libres
  ansible.builtin.set_fact:
    selected_ips: "{{ available_ips.json['values'][:(ip_allocate_count | int)] }}"
  when: available_ips.json['values'] | length > 0
  
- name: Validar que se encontraron IPs suficientes
  ansible.builtin.assert:
    that:
      - selected_ips | length > 0
    fail_msg: "‚ùå No hay IPs libres disponibles en la red externa '{{ externalNetworkName }}'."
    success_msg: "‚úÖ Se encontraron IPs libres para asignar al Edge."

- name: Construir estructura de subnets con IPs seleccionadas
  ansible.builtin.set_fact:
    edge_subnets:
      - gateway: "{{ uplink_subnets[0].gateway }}"
        prefixLength: "{{ uplink_subnets[0].prefixLength }}"
        ipRanges:
          values:
            - startAddress: "{{ selected_ips[0] }}"
              endAddress: "{{ selected_ips[-1] }}"

- name: Mostrar subnets finales a aplicar
  ansible.builtin.debug:
    msg: "{{ edge_subnets | to_nice_json }}"

# -----------------------------------------------------------
# Actualizar el Edge Gateway con las IPs seleccionadas
# -----------------------------------------------------------
- name: Actualizar Edge Gateway con IPs seleccionadas
  when: edge_urn != ''
  ansible.builtin.uri:
    url: "{{ vcd.host }}/cloudapi/1.0.0/edgeGateways/{{ edge_urn }}"
    method: PUT
    headers:
      Accept: "application/json;version={{ vcd.api_version }}"
      Authorization: "Bearer {{ vcd.access_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      edgeGatewayUplinks:
        - uplinkId: "{{ extNetId }}"
          dedicated: "{{ 'false' if vcd.networkType == 'IO' else 'true' }}"
          subnets:
            values: "{{ edge_subnets }}"
    validate_certs: false
  register: edge_update
  failed_when: edge_update.status not in [200, 201, 202]

- name: Confirmar actualizaci√≥n de Edge Gateway
  ansible.builtin.debug:
    msg:
      - "‚úÖ Edge Gateway '{{ edgeGatewayName }}' actualizado correctamente con IPs asignadas."
      - "üÜî Edge URN: {{ edge_urn }}"
      - "üåê IPs aplicadas: {{ selected_ips }}"
